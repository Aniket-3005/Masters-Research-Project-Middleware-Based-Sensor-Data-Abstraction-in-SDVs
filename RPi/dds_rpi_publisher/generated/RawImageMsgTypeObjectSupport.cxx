// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RawImageMsgTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "RawImageMsgTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "RawImageMsg.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace sensor {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_RawImageMsg_type_identifier(
        TypeIdentifierPair& type_ids_RawImageMsg)
{

    ReturnCode_t return_code_RawImageMsg {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RawImageMsg =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "sensor::RawImageMsg", type_ids_RawImageMsg);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RawImageMsg)
    {
        StructTypeFlag struct_flags_RawImageMsg = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_RawImageMsg = "sensor::RawImageMsg";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RawImageMsg;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RawImageMsg;
        CompleteTypeDetail detail_RawImageMsg = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RawImageMsg, ann_custom_RawImageMsg, type_name_RawImageMsg.to_string());
        CompleteStructHeader header_RawImageMsg;
        header_RawImageMsg = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_RawImageMsg);
        CompleteStructMemberSeq member_seq_RawImageMsg;
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_timestamp))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000000;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_RawImageMsg.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_RawImageMsg);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_RawImageMsg, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_camera_source;
            ReturnCode_t return_code_camera_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_camera_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_camera_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_camera_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_camera_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_camera_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_camera_source = 0x00000001;
            bool common_camera_source_ec {false};
            CommonStructMember common_camera_source {TypeObjectUtils::build_common_struct_member(member_id_camera_source, member_flags_camera_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_camera_source, common_camera_source_ec))};
            if (!common_camera_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure camera_source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_camera_source = "camera_source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_camera_source;
            ann_custom_RawImageMsg.reset();
            CompleteMemberDetail detail_camera_source = TypeObjectUtils::build_complete_member_detail(name_camera_source, member_ann_builtin_camera_source, ann_custom_RawImageMsg);
            CompleteStructMember member_camera_source = TypeObjectUtils::build_complete_struct_member(common_camera_source, detail_camera_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_RawImageMsg, member_camera_source);
        }
        {
            TypeIdentifierPair type_ids_image_format;
            ReturnCode_t return_code_image_format {eprosima::fastdds::dds::RETCODE_OK};
            return_code_image_format =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_image_format);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_image_format)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_image_format))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_image_format = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_image_format = 0x00000002;
            bool common_image_format_ec {false};
            CommonStructMember common_image_format {TypeObjectUtils::build_common_struct_member(member_id_image_format, member_flags_image_format, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_image_format, common_image_format_ec))};
            if (!common_image_format_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure image_format member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_image_format = "image_format";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_image_format;
            ann_custom_RawImageMsg.reset();
            CompleteMemberDetail detail_image_format = TypeObjectUtils::build_complete_member_detail(name_image_format, member_ann_builtin_image_format, ann_custom_RawImageMsg);
            CompleteStructMember member_image_format = TypeObjectUtils::build_complete_struct_member(common_image_format, detail_image_format);
            TypeObjectUtils::add_complete_struct_member(member_seq_RawImageMsg, member_image_format);
        }
        {
            TypeIdentifierPair type_ids_image_data;
            ReturnCode_t return_code_image_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_image_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_image_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_image_data)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_image_data))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_image_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_image_data = 0x00000003;
            bool common_image_data_ec {false};
            CommonStructMember common_image_data {TypeObjectUtils::build_common_struct_member(member_id_image_data, member_flags_image_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_image_data, common_image_data_ec))};
            if (!common_image_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure image_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_image_data = "image_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_image_data;
            ann_custom_RawImageMsg.reset();
            CompleteMemberDetail detail_image_data = TypeObjectUtils::build_complete_member_detail(name_image_data, member_ann_builtin_image_data, ann_custom_RawImageMsg);
            CompleteStructMember member_image_data = TypeObjectUtils::build_complete_struct_member(common_image_data, detail_image_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_RawImageMsg, member_image_data);
        }
        CompleteStructType struct_type_RawImageMsg = TypeObjectUtils::build_complete_struct_type(struct_flags_RawImageMsg, header_RawImageMsg, member_seq_RawImageMsg);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_RawImageMsg, type_name_RawImageMsg.to_string(), type_ids_RawImageMsg))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "sensor::RawImageMsg already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace sensor

